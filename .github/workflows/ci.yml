name: CI

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache frontend deps
        uses: actions/cache@v4
        with:
          path: bilten-frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('bilten-frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      - name: Cache backend deps
        uses: actions/cache@v4
        with:
          path: bilten-backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('bilten-backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-

      - name: Install frontend
        run: npm ci --prefix bilten-frontend

      - name: Install backend
        run: npm ci --prefix bilten-backend

      - name: Lint (frontend if config present)
        run: |
          if [ -f bilten-frontend/.eslintrc ] || [ -f bilten-frontend/.eslintrc.js ] || [ -f bilten-frontend/.eslintrc.json ]; then \
            npx --yes eslint "bilten-frontend/src/**/*.{js,jsx}"; \
          else \
            echo "No ESLint config detected in frontend, skipping"; \
          fi

      - name: Test frontend with coverage (lcov)
        run: npm test --prefix bilten-frontend -- --watchAll=false --coverage --coverageReporters=lcov

      - name: Test backend with coverage (lcov)
        run: npm test --prefix bilten-backend -- --coverage --coverageReporters=lcov

      - name: Build frontend
        run: npm run build --prefix bilten-frontend

      - name: Build backend
        run: npm run build --prefix bilten-backend

      - name: Upload frontend coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: |
            bilten-frontend/coverage
          if-no-files-found: warn

      - name: Upload backend coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: |
            bilten-backend/coverage
          if-no-files-found: warn

      - name: Upload coverage to Codecov (frontend)
        uses: codecov/codecov-action@v4
        with:
          files: bilten-frontend/coverage/lcov.info
          flags: frontend
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

      - name: Upload coverage to Codecov (backend)
        uses: codecov/codecov-action@v4
        with:
          files: bilten-backend/coverage/lcov.info
          flags: backend
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./bilten-backend
          file: ./bilten-backend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/backend:latest
            ghcr.io/${{ github.repository }}/backend:${{ github.sha }}
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend

      - name: Build and push backend tag image
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/build-push-action@v6
        with:
          context: ./bilten-backend
          file: ./bilten-backend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/backend:${{ github.ref_name }}
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./bilten-frontend
          file: ./bilten-frontend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/frontend:latest
            ghcr.io/${{ github.repository }}/frontend:${{ github.sha }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend

      - name: Build and push frontend tag image
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/build-push-action@v6
        with:
          context: ./bilten-frontend
          file: ./bilten-frontend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/frontend:${{ github.ref_name }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend

      - name: Build and push scanner image
        uses: docker/build-push-action@v6
        with:
          context: ./bilten-scanner
          file: ./bilten-scanner/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/scanner:latest
            ghcr.io/${{ github.repository }}/scanner:${{ github.sha }}
          cache-from: type=gha,scope=scanner
          cache-to: type=gha,mode=max,scope=scanner

      - name: Build and push scanner tag image
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/build-push-action@v6
        with:
          context: ./bilten-scanner
          file: ./bilten-scanner/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/scanner:${{ github.ref_name }}
          cache-from: type=gha,scope=scanner
          cache-to: type=gha,mode=max,scope=scanner

