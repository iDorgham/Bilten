version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: bilten-postgres
    environment:
      POSTGRES_DB: bilten_dev
      POSTGRES_USER: bilten_user
      POSTGRES_PASSWORD: bilten_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - bilten-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bilten-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bilten-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Bilten Backend API
  backend:
    build: 
      context: ./bilten-backend
      dockerfile: Dockerfile
    container_name: bilten-backend
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: bilten_dev
      DB_USER: bilten_user
      DB_PASSWORD: bilten_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: dev-jwt-secret-key-not-for-production
      FRONTEND_URL: http://localhost:3000
      SCANNER_URL: http://localhost:3002
      API_VERSION: v1
      STORAGE_TYPE: local
      UPLOAD_DIR: uploads
    env_file:
      - .env
    ports:
      - "3001:3001"
    volumes:
      - ./bilten-backend:/app
      - /app/node_modules
      - ./bilten-backend/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bilten-network
    command: npm start
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:3001/health',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\""]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  # React Frontend (dev server)
  frontend:
    image: node:20-alpine
    container_name: bilten-frontend
    working_dir: /app
    environment:
      HOST: 0.0.0.0
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
      PORT: 3000
      REACT_APP_API_BASE_URL: http://localhost:3001/v1
    ports:
      - "3000:3000"
    volumes:
      - ./bilten-frontend:/app
      - /app/node_modules
    command: sh -c "npm install --legacy-peer-deps && npm start"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - bilten-network
    restart: unless-stopped

  # Bilten Scanner (PWA)
  scanner:
    image: node:20-alpine
    container_name: bilten-scanner
    working_dir: /app
    environment:
      HOST: 0.0.0.0
      PORT: 3002
      VITE_API_BASE_URL: http://localhost:3001/v1
    ports:
      - "3002:3002"
    volumes:
      - ./bilten-scanner:/app
      - /app/node_modules
    command: sh -c "npm install && npm run dev"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - bilten-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  bilten-network:
    driver: bridge